afegir text "comprovacio de cadenes"

triar text {comprovacio de cadenes}

contingut ?
1 a?
2 e!
3 a b c d.
4 a b a d.
5 a a a d.
6 a a a a.
7 a, a, a, a.

frases "a" ?
1 a?
3 a b c d.
4 a b a d.
5 a a a d.
6 a a a a.
7 a, a, a, a.

frases "a b" ?
3 a b c d.
4 a b a d.

frases "c a" ?

frases "a d" ?
4 a b a d.
5 a a a d.

frases "a d e" ?

frases "c d" ?
3 a b c d.

frases "e a b" ?

frases "c d e" ?

frases "e f" ?

frases "a a" ?
5 a a a d.
6 a a a a.
7 a, a, a, a.

frases "a c" ?

afegir text "comprovacio taules de veritat"

triar text {comprovacio taules de veritat}

contingut ?
1 a?
2 e!
3 a b.
4 a, b; e?
5 a a a a b b b b b.

frases ({a} & {b}) ?
3 a b.
4 a, b; e?
5 a a a a b b b b b.

frases ({c} & {b}) ?

frases ({a} & {c}) ?

frases ({c} & {d}) ?

frases ({a} | {b}) ?
1 a?
3 a b.
4 a, b; e?
5 a a a a b b b b b.

frases ({c} | {b}) ?
3 a b.
4 a, b; e?
5 a a a a b b b b b.

frases ({a} | {c}) ?
1 a?
3 a b.
4 a, b; e?
5 a a a a b b b b b.

frases ({c} | {d}) ?

frases ({a} & {a}) ?
1 a?
3 a b.
4 a, b; e?
5 a a a a b b b b b.

frases ({d} & {d}) ?

frases ({a} | {a}) ?
1 a?
3 a b.
4 a, b; e?
5 a a a a b b b b b.

frases ({d} | {d}) ?

afegir text "comprovacio conjunts"

triar text {comprovacio conjunts}

contingut ?
1 a?
2 e!
3 a b.
4 a, b; e?
5 a a a a b b b b b.

frases {a} ?
1 a?
3 a b.
4 a, b; e?
5 a a a a b b b b b.

frases {a b} ?
3 a b.
4 a, b; e?
5 a a a a b b b b b.

frases {b e} ?
4 a, b; e?

frases {c d} ?

afegir text "comprovacio expressions mes complexes"

triar text {comprovacio expressions mes complexes}

contingut ?
1 La casa es blanca, el rio gris, el estanque verde y el cielo azul.
2 Siempre que iba al rio vestia de azul; y aunque aquel dia el cielo era gris, ella se sentia alegre.
3 Siempre pasaba lo mismo; al principio la nieve era blanca pero se volvia gris.
4 Cuando llegara la nieve?
5 Que triste!
6 Que alegre!

frases {blanca gris verde azul} ?
1 La casa es blanca, el rio gris, el estanque verde y el cielo azul.

frases ({nieve} | ({gris azul} & {rio cielo})) ?
1 La casa es blanca, el rio gris, el estanque verde y el cielo azul.
2 Siempre que iba al rio vestia de azul; y aunque aquel dia el cielo era gris, ella se sentia alegre.
3 Siempre pasaba lo mismo; al principio la nieve era blanca pero se volvia gris.
4 Cuando llegara la nieve?

frases ({alegre} & ({gris} | {triste})) ?
2 Siempre que iba al rio vestia de azul; y aunque aquel dia el cielo era gris, ella se sentia alegre.

frases (({triste} | {alegre}) & (({verde} | {blanca}) | {gris})) ?
2 Siempre que iba al rio vestia de azul; y aunque aquel dia el cielo era gris, ella se sentia alegre.

frases (({triste} & {alegre}) | (({azul} | {blanca}) & {gris})) ?
1 La casa es blanca, el rio gris, el estanque verde y el cielo azul.
2 Siempre que iba al rio vestia de azul; y aunque aquel dia el cielo era gris, ella se sentia alegre.
3 Siempre pasaba lo mismo; al principio la nieve era blanca pero se volvia gris.

afegir text "comprovacio de frases x y"

triar text {comprovacio de frases x y}

contingut ?
1 In this work we tackle the problem of extending the logic of nested graph conditions with paths.
2 This means, for instance, that we may state properties about the existence of paths between some given nodes.
3 Being able to state properties about graphs and to reason about them is important in many areas of computer science, where graphs play a relevant role.
4 For instance, in software and system modeling, where models are described using different graphical notations, graph properties may be used to describe properties of the given models, and reasoning tools may be used for model validation.
5 Similarly, in the context of graph databases, for instance, graph properties could be used to express integrity constraints or just to express queries to the database.
6 In that context reasoning tools may allow us check these constraints or to formally define the search engine to satisfy these queries.
7 Two kinds of approaches can be used to describe graph properties.
8 On the one hand, we may use some standard logic, after encoding some graph concepts in the logic.
9 For instance, this is the approach of Courcelle, who studied a graph logic defined in terms of firstorder, or monadic second order, logic, extended with a predicate N for stating that n is a node, and with a predicate E, for stating that there is an edge from node n no m.
10 The second kind of approach is based on expressing graph properties in terms of formulas that include graphs and graph morphisms.
11 The most important example of this kind of approach is the logic of nested graph conditions, LNGC, introduced by Habel and Pennemann, which was proven to be equivalent to the firstorder logic of graphs of Courcelle.
12 Moreover Pennemann showed that a specialized prover for their logic outperformed some standard provers, like Darwin or Vampire, when applied to graph formulas using Courcelles logic.
13 As a main contribution, in this work, we define a sound and complete tableau method for reasoning about this kind of properties.

frases 1 1 ?
1 In this work we tackle the problem of extending the logic of nested graph conditions with paths.

frases 13 13 ?
13 As a main contribution, in this work, we define a sound and complete tableau method for reasoning about this kind of properties.

frases 1 13 ?
1 In this work we tackle the problem of extending the logic of nested graph conditions with paths.
2 This means, for instance, that we may state properties about the existence of paths between some given nodes.
3 Being able to state properties about graphs and to reason about them is important in many areas of computer science, where graphs play a relevant role.
4 For instance, in software and system modeling, where models are described using different graphical notations, graph properties may be used to describe properties of the given models, and reasoning tools may be used for model validation.
5 Similarly, in the context of graph databases, for instance, graph properties could be used to express integrity constraints or just to express queries to the database.
6 In that context reasoning tools may allow us check these constraints or to formally define the search engine to satisfy these queries.
7 Two kinds of approaches can be used to describe graph properties.
8 On the one hand, we may use some standard logic, after encoding some graph concepts in the logic.
9 For instance, this is the approach of Courcelle, who studied a graph logic defined in terms of firstorder, or monadic second order, logic, extended with a predicate N for stating that n is a node, and with a predicate E, for stating that there is an edge from node n no m.
10 The second kind of approach is based on expressing graph properties in terms of formulas that include graphs and graph morphisms.
11 The most important example of this kind of approach is the logic of nested graph conditions, LNGC, introduced by Habel and Pennemann, which was proven to be equivalent to the firstorder logic of graphs of Courcelle.
12 Moreover Pennemann showed that a specialized prover for their logic outperformed some standard provers, like Darwin or Vampire, when applied to graph formulas using Courcelles logic.
13 As a main contribution, in this work, we define a sound and complete tableau method for reasoning about this kind of properties.

frases 0 3 ?
error

frases 10 14 ?
error

frases 5 2 ?
error

frases -1 3 ?
error

frases 5 9 ?
5 Similarly, in the context of graph databases, for instance, graph properties could be used to express integrity constraints or just to express queries to the database.
6 In that context reasoning tools may allow us check these constraints or to formally define the search engine to satisfy these queries.
7 Two kinds of approaches can be used to describe graph properties.
8 On the one hand, we may use some standard logic, after encoding some graph concepts in the logic.
9 For instance, this is the approach of Courcelle, who studied a graph logic defined in terms of firstorder, or monadic second order, logic, extended with a predicate N for stating that n is a node, and with a predicate E, for stating that there is an edge from node n no m.

